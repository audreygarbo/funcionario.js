//Imagine que você está desenvolvendo um sistema para uma empresa que possui diferentes tipos de funcionários, como gerentes e desenvolvedores.
//Seu objetivo é implementar o código em JavaScript que modele essa situação utilizando classes e herança.
//Você precisa criar as classes Funcionario, Gerente e Desenvolvedor.
//A classe Funcionario deve ter os atributos nome, idade e cargo, além dos métodos seApresentar() e trabalhar().
//A classe Gerente deve herdar da classe Funcionario e ter um atributo adicional departamento, além do método gerenciar().
//Já a classe Desenvolvedor deve herdar da classe Funcionario e ter um atributo adicional linguagem, além do método programar().


class Funcionario {
    constructor(nome, idade, cargo) {
        this.nome = nome;
        this.idade = idade;
        this.cargo = cargo;
    }

    seApresentar() {
        console.log("Olá, meu nome é ${this.nome}, tenho ${this.idade} anos e sou ${this.cargo}.");
    }

    trabalhar() {
        console.log("${this.nome} está trabalhando atualmente.");
    }
}

class Gerente extends Funcionario {
    constructor(nome, idade, cargo, departamento) {
        super(nome, idade, cargo);

// Chama o construtor da classe pai

        this.departamento = departamento;
    }

    gerenciar() {
        console.log(`${this.nome} está gerenciando o departamento de ${this.departamento}.`);
    }
}

class Desenvolvedor extends Funcionario {
    constructor(nome, idade, cargo, linguagem) {
        super(nome, idade, cargo);
        this.linguagem = linguagem;
    }

    programar() {
        console.log("${this.nome} está programando em ${this.linguagem}.");

    }
}

// Criando instâncias
const gerente = new Gerente("Henry", 47, "Gerente", "Marketing");
const desenvolvedor = new Desenvolvedor("Audrey Machado", 32, "Desenvolvedora", "JavaScript");

// Chamando os métodos
gerente.seApresentar();
gerente.trabalhar();
gerente.gerenciar();

desenvolvedor.seApresentar();
desenvolvedor.trabalhar();
desenvolvedor.programar();
